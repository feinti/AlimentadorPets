# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - backend
  paths:
    include:
    - backend/login
    exclude:
    - backend/login/README.md

pool:
  vmImage: 'ubuntu-latest'

variables:
  namespaceId: 'titi-programmer'
  tag: '$(Build.BuildId)'
  kubernetesServiceId: 'okteto_service_connection'

steps:
- task: Docker@2
  displayName: Build backend-login 
  inputs:
    repository: 'tgfein/microservices-okteto-backend-login'
    command: 'buildAndPush'
    Dockerfile: 'backend/login/Dockerfile'
    containerRegistry: 'dockerHub'
    tags: |
      $(tag)
      latest
- task: Kubernetes@0
  displayName: kubectl apply deployment-login.yml
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: '$(kubernetesServiceId)'
    namespace: '$(namespaceId)'
    command: apply
    arguments: -f backend/login/k8s/deployment-login.yml
- task: Kubernetes@0
  displayName: kubectl apply service-login.yml
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: '$(kubernetesServiceId)'
    namespace: '$(namespaceId)'
    command: apply
    arguments: -f backend/login/k8s/service-login.yml
- task: Kubernetes@0
  displayName: kubectl update image login-backend@deploy
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: '$(kubernetesServiceId)'
    namespace: '$(namespaceId)'
    command: set
    arguments: image deployment/microservices-okteto-backend-login microservices-okteto-backend-login=tgfein/microservices-okteto-backend-login:$(tag) --record
